#!/usr/bin/python
#-*- coding: latin-1 -*-
"""Low level wrapper to SisApi."""

import ctypes
import numpy
from numpy.ctypeslib import ndpointer

#{ Constants for Get
SISGET_NOTHING = 0
SISGET_SISDATAADDRESS = 1	# void *lpData
SISGET_FRAMEWIDTH = 2		# int *lpData
SISGET_FRAMEHEIGHT = 3		# int *lpData
SISGET_ALLOCFRAMENUMBER = 4	# int *lpData
SISGET_ROI = 5			# RECT *lpData
SISGET_ACQMODE = 6		# int *lpData
SISGET_ACQFRAMECOUNT = 7	# int *lpData
SISGET_ACQADDRESS = 8		# WORD **lpData
SISGET_ACTWIDTH = 9		# int *lpData
SISGET_ACTHEIGHT = 10		# int *lpData
SISGET_ACTROI = 11		# RECT *lpData
SISGET_ACTFRAMENR = 12		# int *lpData
SISGET_ACTFRAMEIX = 13		# int *lpData
SISGET_ACTSYNCTIME = 14		# FILETIME *lpData
SISGET_BINNINGENABLE = 15	# bool *lpData
SISGET_CAMERANAME = 16		# char*
SISGET_TIMETRIGGER = 17		# FILETIME *lpData
SISGET_INTTIME = 18		# DWORD *lpData
SISGET_REPTIME = 19		# DWORD *lpData
SISGET_MASTERMODE = 20		# BYTE *lpData
SISGET_OPMODE = 21		# BYTE *lpData
#}

#{ Error codes
SIS_OK                   = 0
SIS_ERROR_UNKNOWN        = 0x10000 + 1
SIS_ERROR_WRONGPARAMETER = 0x10000 + 2
SIS_ERROR_WRONGHANDLE    = 0x10000 + 3
SIS_FUNCTIONNOTIMPL      = 0x10000 + 4
SIS_TIMEOUT              = 0x10000 + 5
SIS_CAMCONFIG            = 0x10000 + 6
SIS_NOTINIT              = 0x10000 + 7
SIS_ERROR_ALLOC          = 0x10000 + 8
#}

#{Acquistion modes
SIS_ACQ_FREEZE     = 0
SIS_ACQ_SINGLESHOT = 1
SIS_ACQ_CONTINOUS  = -1
#}

SIS_DIAG_NOTHING	= 0x00000000
SIS_DIAG_GENERAL	= 0x00000001
SIS_DIAG_ADDRESSES	= 0x00000002
SIS_DIAG_ACQUISITION	= 0x00000008
SIS_DIAG_INTERRUPT	= 0x00000010
SIS_DIAG_MISCELLANEOUS	= 0x00000020
SIS_DIAG_BINNING	= 0x00000040
SIS_DIAG_ALL		= 0xFFFFFFFF


#{ debug levels
SIS_DEBUG_NOTHING	= 0x00000000
SIS_DEBUG_MESSAGEBOX	= 0x00000001
SIS_DEBUG_PCIINFO  	= 0x00000100
SIS_DEBUG_SCANFRAME	= 0x00000200
SIS_DEBUG_TIME		= 0x00000400
SIS_DEBUG_LOGFILEPIXEL	= 0x00000800
SIS_DEBUG_SERIAL	= 0x00001000
SIS_DEBUG_STARTFUNCTION	= 0x00002000
SIS_DEBUG_TRIGGER	= 0x00004000
SIS_DEBUG_SETBINNING	= 0x00008000
SIS_DEBUG_ALL		= 0xFFFFFF00
#}

sis_error_description = {
    SIS_ERROR_UNKNOWN        : "unknown error",
    SIS_ERROR_WRONGPARAMETER : "wrong parameter",
    SIS_ERROR_WRONGHANDLE    : "wrong handle",
    SIS_FUNCTIONNOTIMPL      : "function not implemented",
    SIS_TIMEOUT              : "timeout",
    SIS_CAMCONFIG            : "error configuring camera",
    SIS_NOTINIT              : "not initialized",
    SIS_ERROR_ALLOC          : "error allocating memory",
    }
    

class SislibError(Exception):
    """Base class for exceptions generated by calls to Sislib-API
    functions."""
    def __init__(self, statuscode, func):
        description = \
            "Error in calling function <%s> of SisApi.dll: %s"%\
            (func.__name__,
             sis_error_description.get(statuscode,"no error description available"))
        Exception.__init__(self, description)

class SislibTimeoutError(SislibError):
    """Timeout when waiting for image acquisition."""
    def __init__(self, statuscode, func):
        SislibError.__init__(self, statuscode, func)

excdict = {SIS_TIMEOUT: SislibTimeoutError}
"""@var excdict: dictionary of errorcode/exception. Used to throw
different Exceptions for different error codes returned by Sisapi
functions. If errorcode is not contained in this dict, a base
L{SislibError} is thrown."""

class RECT(ctypes.Structure):
    """Wrap description of image rectangle into ctypes compatible
    structure"""
    _fields_ = [('left', ctypes.c_long),
                ('top', ctypes.c_long),                
                ('right', ctypes.c_long),
                ('bottom', ctypes.c_long)]

class Singleton(object):
    """Base class for singleton classes. Takes care that only a single
    instance of this class is created.
    """
    def __new__(cls, *args, **kwds):
        it = cls.__dict__.get("__it__")
        if it is not None:
            return it
        cls.__it__ = it = object.__new__(cls)
        it.init(*args, **kwds)
        return it
    def init(self, *args, **kwds):
        pass
    def __init__(self, *args, **kwds):
        pass

class SisLibrary(Singleton):
    """Provide access to functions of SisApi library."""

    def __init__(self):
        self.__lib = None

    def load_library(self, path = None):
        """Load dynamic library. Can be called by user to load a specific library."""
        if path:
            self.__lib = ctypes.windll.LoadLibrary(path)
        else:
            self.__lib = ctypes.windll.SisApi
        self.__set_argument_types()

    def __call__(self):
        if self.__lib is None:
            self.load_library()
        return self.__lib
    
    def _sis_error_check(self, result, func, args):
        """Create exception (see L{excdict}) if function returns an error.
        """
        if result != SIS_OK:
            exc = excdict.get(result, SislibError)
            raise exc, (result, func)

    def __set_argument_types(self):
        """Declare arguments and return types."""
        for sis_function in ["sis_Open",
                             "sis_Reset",
                             "sis_Close",
                             "sis_StartAcq",
                             "sis_WaitAcqEnd",
                             "sis_StopAcq",
                             "sis_SetROI",
                             "sis_Get",
                             "sis_CopyAcqData",
                             "sis_GetDriverRevision",
                             "sis_TextOutSisData",
                             "sis_SetTiming",
                             ]:
            self.__lib.__getattr__(sis_function).errcheck = self._sis_error_check
            
        self.__lib.sis_Open.argtypes = \
                 [ctypes.c_int,
                  ctypes.c_char_p]

        self.__lib.sis_Reset.argtypes = [ctypes.c_int]

        self.__lib.sis_Close.argtypes = \
            [ctypes.c_int]
        
        self.__lib.sis_StartAcq.argtypes = \
            [ctypes.c_int, 
             ctypes.c_int]
        
        self.__lib.sis_WaitAcqEnd.argtypes = \
            [ctypes.c_int, 
             ctypes.c_int]

        self.__lib.sis_StopAcq.argtypes = \
            [ctypes.c_int]
   
        self.__lib.sis_Get.argtypes = \
            [ctypes.c_int, 
             ctypes.c_int, 
             ctypes.c_void_p]

        self.__lib.sis_SetROI.argtypes = \
            [ctypes.c_int,
             ctypes.c_void_p]

        self.__lib.sis_CopyAcqData.argtypes = \
            [ctypes.c_int, 
             ctypes.c_int, 
             ctypes.c_void_p]

        self.__lib.sis_CopyAcqData.argtypes = \
            [ctypes.c_int, 
             ctypes.c_int, 
             ndpointer(numpy.uint16, flags = 'aligned, contiguous, writeable')
             ]

        self.__lib.sis_GetDriverRevision.argtypes = \
            [ctypes.c_char_p]
        
        self.__lib.sis_TextOutSisData.argtypes = \
            [ctypes.c_int, ctypes.c_char_p, ctypes.c_uint32]
             
        self.__lib.sis_SetTiming.argtypes = \
            [ctypes.c_int, ctypes.c_uint32, ctypes.c_uint32]
